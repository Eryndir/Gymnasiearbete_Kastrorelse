/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Package;

import java.awt.*;
import java.awt.geom.AffineTransform;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Edvin
 */
public class GraphicalInterface extends javax.swing.JFrame {
    int test = 0;
    double Zoom;
    int rutnatStorlek;
    Boolean grafFinns = false;
    Boolean grafFinnsLuft = false;
    Boolean grafRensa = true;
    
    Scanner scanner;
    FormelMetoder fm;
    FormelMetoderLuft fmLuft;
    GrafRitare gf;
    GrafRitare gfLuft;
    public GraphicalInterface() {
        initComponents();
        jTextFieldMassa.setVisible(false);
        jTextFieldArea.setVisible(false);
        jTextFieldDensitet.setVisible(false);
        jTextFieldKoefficienten.setVisible(false);
        
        jLabelMassa.setVisible(false);
        jLabelArea.setVisible(false);
        jLabelDensitet.setVisible(false);
        jLabelKoefficienten.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jTextFieldHastighet = new javax.swing.JTextField();
        jTextFieldYStartPosition = new javax.swing.JTextField();
        jTextFieldVinkel = new javax.swing.JTextField();
        jTextFieldTyngdAcceleration = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaResultat = new javax.swing.JTextArea();
        jLabelHastighet = new javax.swing.JLabel();
        jLabelYStartPosition = new javax.swing.JLabel();
        jLabelVinkel = new javax.swing.JLabel();
        jLabelTyngdAcceleration = new javax.swing.JLabel();
        jLabelDeltaT = new javax.swing.JLabel();
        jTextFieldDeltaT = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanelGraf2 = new MyPanel();
        jLabelZoom = new javax.swing.JLabel();
        jTextFieldZoom = new javax.swing.JTextField();
        jCheckBoxLuft = new javax.swing.JCheckBox();
        jTextFieldRutnat = new javax.swing.JTextField();
        jLabelRutnat = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaResultatLuft = new javax.swing.JTextArea();
        jLabelArea = new javax.swing.JLabel();
        jLabelMassa = new javax.swing.JLabel();
        jLabelKoefficienten = new javax.swing.JLabel();
        jLabelDensitet = new javax.swing.JLabel();
        jTextFieldMassa = new javax.swing.JTextField();
        jTextFieldArea = new javax.swing.JTextField();
        jTextFieldDensitet = new javax.swing.JTextField();
        jTextFieldKoefficienten = new javax.swing.JTextField();
        jLabelList = new javax.swing.JLabel();
        jLabelListLuft = new javax.swing.JLabel();
        jButtonPingisboll = new javax.swing.JButton();
        jButtonBowling = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButtonRensa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1668, 780));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 80, -1));

        jTextFieldHastighet.setText("25");
        jTextFieldHastighet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldHastighetActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldHastighet, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 580, 80, -1));

        jTextFieldYStartPosition.setText("0");
        getContentPane().add(jTextFieldYStartPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 580, 80, -1));

        jTextFieldVinkel.setText("60");
        getContentPane().add(jTextFieldVinkel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 540, 80, -1));

        jTextFieldTyngdAcceleration.setText("9.82");
        getContentPane().add(jTextFieldTyngdAcceleration, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 540, 80, -1));

        jTextAreaResultat.setColumns(20);
        jTextAreaResultat.setRows(5);
        jScrollPane1.setViewportView(jTextAreaResultat);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1004, 24, 320, 489));

        jLabelHastighet.setText("Hastighet (meter/sekund)");
        getContentPane().add(jLabelHastighet, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 580, -1, -1));

        jLabelYStartPosition.setText("Y-led start (meter)");
        getContentPane().add(jLabelYStartPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 580, -1, -1));

        jLabelVinkel.setText("Vinkel (grader)");
        getContentPane().add(jLabelVinkel, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 540, -1, -1));

        jLabelTyngdAcceleration.setText("Tyngdacceleration (meter/sekund²)");
        getContentPane().add(jLabelTyngdAcceleration, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 540, -1, -1));

        jLabelDeltaT.setText("delta Tid");
        getContentPane().add(jLabelDeltaT, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 670, -1, -1));

        jTextFieldDeltaT.setText("0.01");
        jTextFieldDeltaT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDeltaTActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldDeltaT, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 670, 80, -1));
        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 34, -1, -1));

        jPanelGraf2.setPreferredSize(new java.awt.Dimension(800, 400));

        javax.swing.GroupLayout jPanelGraf2Layout = new javax.swing.GroupLayout(jPanelGraf2);
        jPanelGraf2.setLayout(jPanelGraf2Layout);
        jPanelGraf2Layout.setHorizontalGroup(
            jPanelGraf2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 890, Short.MAX_VALUE)
        );
        jPanelGraf2Layout.setVerticalGroup(
            jPanelGraf2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanelGraf2);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(63, 24, 893, 489));

        jLabelZoom.setText("Zoom");
        getContentPane().add(jLabelZoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 630, -1, -1));

        jTextFieldZoom.setText("10");
        jTextFieldZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldZoomActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldZoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 630, 80, -1));

        jCheckBoxLuft.setText("Luftmotstånd");
        jCheckBoxLuft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxLuftActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBoxLuft, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 620, -1, -1));

        jTextFieldRutnat.setText("10");
        getContentPane().add(jTextFieldRutnat, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 590, 80, -1));

        jLabelRutnat.setText("Rutnat storlek");
        getContentPane().add(jLabelRutnat, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, -1, -1));

        jTextAreaResultatLuft.setColumns(20);
        jTextAreaResultatLuft.setRows(5);
        jScrollPane4.setViewportView(jTextAreaResultatLuft);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1336, 24, 320, 489));

        jLabelArea.setText("Tvärsnitsarea (meter²)");
        getContentPane().add(jLabelArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 670, -1, -1));

        jLabelMassa.setText("Massa (Kilogram)");
        getContentPane().add(jLabelMassa, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 670, -1, -1));

        jLabelKoefficienten.setText("luftmotståndskoefficienten");
        getContentPane().add(jLabelKoefficienten, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 710, -1, -1));

        jLabelDensitet.setText("Luft densitet (kilogram/meter³)");
        getContentPane().add(jLabelDensitet, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 710, -1, -1));

        jTextFieldMassa.setText("0.00258");
        getContentPane().add(jTextFieldMassa, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 670, 80, -1));

        jTextFieldArea.setText("0.0011460844");
        getContentPane().add(jTextFieldArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 670, 130, -1));

        jTextFieldDensitet.setText("1.2041");
        getContentPane().add(jTextFieldDensitet, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 710, 130, -1));

        jTextFieldKoefficienten.setText("0.45");
        getContentPane().add(jTextFieldKoefficienten, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 710, 80, -1));

        jLabelList.setText("Formel utan luftmotstånd");
        getContentPane().add(jLabelList, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 530, -1, -1));

        jLabelListLuft.setText("Formel med luftmotstånd");
        getContentPane().add(jLabelListLuft, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 530, -1, -1));

        jButtonPingisboll.setText("Pingisboll");
        jButtonPingisboll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPingisbollActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonPingisboll, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 660, 100, -1));

        jButtonBowling.setText("Bowlingklot");
        jButtonBowling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBowlingActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonBowling, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 700, 100, -1));

        jButton3.setText("jButton3");
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 660, -1, -1));

        jButton4.setText("jButton4");
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 700, -1, -1));

        jButton5.setText("jButton5");
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 660, -1, -1));

        jButton6.setText("jButton6");
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 700, -1, -1));

        jButtonRensa.setText("Rensa");
        jButtonRensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRensaActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonRensa, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 540, 80, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        fm = new FormelMetoder(); //skapar en graf och alla formler kan användas och variabler kan inmatas
        
        grafRensa = false;
        
        try {
            fm.setV0(Double.parseDouble(jTextFieldHastighet.getText())); //begynnelsehastighet bestämms
            fm.setyStartPosition(Double.parseDouble(jTextFieldYStartPosition.getText())); //y-startposition bestämms
            fm.setVinkel(Double.parseDouble(jTextFieldVinkel.getText())); //vinkeln bestämms
            fm.setG(Double.parseDouble(jTextFieldTyngdAcceleration.getText())); //Tyngdacceleration bestämms

            Zoom = Double.parseDouble(jTextFieldZoom.getText()); //inzoomningen bestämms
            rutnatStorlek = Integer.parseInt(jTextFieldRutnat.getText()); //storlek på rutnät bestämms
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Värdena inmatade fel");
            return;
        }
        
        gf = new GrafRitare(fm, Zoom); //grafritaren skapas så att grafens värden kan räknas ut och sedan ritas ut
        
        grafFinns = true; //indikerar att en graf finns och kan ritas
        
        if(jCheckBoxLuft.isSelected()) {
            fmLuft = new FormelMetoderLuft(); ////skapar en graf anpassad för luftmotstånd och alla formler kan användas och variabler kan inmatas
            
            try {
                fmLuft.setV0(Double.parseDouble(jTextFieldHastighet.getText())); //begynnelsehastighet bestämms
                fmLuft.setyStartPosition(Double.parseDouble(jTextFieldYStartPosition.getText()));//y-startposition bestämms
                fmLuft.setVinkel(Double.parseDouble(jTextFieldVinkel.getText()));//vinkeln bestämms
                fmLuft.setG(Double.parseDouble(jTextFieldTyngdAcceleration.getText()));//Tyngdacceleration bestämms

                fmLuft.setMassa(Double.parseDouble(jTextFieldMassa.getText()));
                fmLuft.setA(Double.parseDouble(jTextFieldArea.getText()));
                fmLuft.setC(Double.parseDouble(jTextFieldKoefficienten.getText()));
                fmLuft.setP(Double.parseDouble(jTextFieldDensitet.getText()));

                Zoom = Double.parseDouble(jTextFieldZoom.getText());//inzoomningen bestämms
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Värdena inmatade fel");
                return;
            }
            
            gfLuft = new GrafRitare(fmLuft, Zoom);//grafritaren anpassad för luftmotstånd skapas så att grafens värden kan räknas ut och sedan ritas ut
            
            grafFinnsLuft = true;//indikerar att en graf anpassad för luftmotstånd finns och kan ritas
        }
        
        //skriver in resultaten av grafen in i listan så att användaren kan läsa värdena
        jTextAreaResultat.setText(gf.resultatOutout(gf.positionRaknare(Double.parseDouble(jTextFieldDeltaT.getText()))));
        if(grafFinnsLuft) {
            jTextAreaResultatLuft.setText(gfLuft.resultatOutout(gfLuft.positionRaknareLuftMotstand(Double.parseDouble(jTextFieldDeltaT.getText()))));
        }
        repaint();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jTextFieldDeltaTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDeltaTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDeltaTActionPerformed

    private void jTextFieldZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldZoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldZoomActionPerformed

    private void jTextFieldHastighetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldHastighetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldHastighetActionPerformed

    private void jCheckBoxLuftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxLuftActionPerformed
        if(jCheckBoxLuft.isSelected()) {
            jTextFieldMassa.setVisible(true);
            jTextFieldArea.setVisible(true);
            jTextFieldDensitet.setVisible(true);
            jTextFieldKoefficienten.setVisible(true);

            jLabelMassa.setVisible(true);
            jLabelArea.setVisible(true);
            jLabelDensitet.setVisible(true);
            jLabelKoefficienten.setVisible(true);
        }
        else {
            jTextFieldMassa.setVisible(false);
            jTextFieldArea.setVisible(false);
            jTextFieldDensitet.setVisible(false);
            jTextFieldKoefficienten.setVisible(false);

            jLabelMassa.setVisible(false);
            jLabelArea.setVisible(false);
            jLabelDensitet.setVisible(false);
            jLabelKoefficienten.setVisible(false);
        }
    }//GEN-LAST:event_jCheckBoxLuftActionPerformed

    private void jButtonPingisbollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPingisbollActionPerformed
        jTextFieldArea.setText("0.0011460844");
        jTextFieldKoefficienten.setText("0.45");
        jTextFieldMassa.setText("0.00258");
    }//GEN-LAST:event_jButtonPingisbollActionPerformed

    private void jButtonBowlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBowlingActionPerformed
        jTextFieldArea.setText("0.0367966228");
        jTextFieldKoefficienten.setText("0.45");
        jTextFieldMassa.setText("6.3");
    }//GEN-LAST:event_jButtonBowlingActionPerformed

    private void jButtonRensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRensaActionPerformed
        grafRensa = true;
        repaint();
    }//GEN-LAST:event_jButtonRensaActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicalInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonBowling;
    private javax.swing.JButton jButtonPingisboll;
    private javax.swing.JButton jButtonRensa;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JCheckBox jCheckBoxLuft;
    private javax.swing.JLabel jLabelArea;
    private javax.swing.JLabel jLabelDeltaT;
    private javax.swing.JLabel jLabelDensitet;
    private javax.swing.JLabel jLabelHastighet;
    private javax.swing.JLabel jLabelKoefficienten;
    private javax.swing.JLabel jLabelList;
    private javax.swing.JLabel jLabelListLuft;
    private javax.swing.JLabel jLabelMassa;
    private javax.swing.JLabel jLabelRutnat;
    private javax.swing.JLabel jLabelTyngdAcceleration;
    private javax.swing.JLabel jLabelVinkel;
    private javax.swing.JLabel jLabelYStartPosition;
    private javax.swing.JLabel jLabelZoom;
    private javax.swing.JPanel jPanelGraf2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextAreaResultat;
    private javax.swing.JTextArea jTextAreaResultatLuft;
    private javax.swing.JTextField jTextFieldArea;
    private javax.swing.JTextField jTextFieldDeltaT;
    private javax.swing.JTextField jTextFieldDensitet;
    private javax.swing.JTextField jTextFieldHastighet;
    private javax.swing.JTextField jTextFieldKoefficienten;
    private javax.swing.JTextField jTextFieldMassa;
    private javax.swing.JTextField jTextFieldRutnat;
    private javax.swing.JTextField jTextFieldTyngdAcceleration;
    private javax.swing.JTextField jTextFieldVinkel;
    private javax.swing.JTextField jTextFieldYStartPosition;
    private javax.swing.JTextField jTextFieldZoom;
    // End of variables declaration//GEN-END:variables

    private class MyPanel extends JPanel {
        //panelen som grafen ritas i
        public MyPanel() {
        }
        
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            setBackground(Color.gray);
            Graphics2D g2d = (Graphics2D) g;
            int rutnat = 0;
            int siffror = 0;
            
            //om det finns en graf ritar programmet siffor anpassat till rutnätets storlek för avläsning av grafen
            if(grafFinns) {
                for (int i = 0; i < 50000; i++) { //vertikala siffror
                    g2d.drawString("" + siffror, 5, jPanelGraf2.getHeight() - ((rutnat * (int) Zoom) + 50));
                    rutnat += rutnatStorlek;
                    siffror += rutnatStorlek;
                }
                
                rutnat = 0;
                siffror = 0;
                for (int i = 0; i < 50000; i++) { //horizontela siffror
                    g2d.drawString("" + rutnat, (rutnat * (int) Zoom) + 45, jPanelGraf2.getHeight() - 20);
                    rutnat += rutnatStorlek;
                    siffror += rutnatStorlek;

                }
            }
            
            //Dessa tre rader gör att man ritar från det nedre vänstra hörn istället från det övre vänstra hörn, vilket underlättar ritning av graf
            AffineTransform old = g2d.getTransform();
            g2d.translate(0, getHeight() - 1);
            g2d.scale(1, -1);
            
            rutnat = (rutnatStorlek *(int)Zoom)+50; //vertikala streck
            g.drawLine(50, 40, 50, jPanelGraf2.getHeight());
            for (int i = 0; i < 50000; i++) {
                g.drawLine(rutnat, 40, rutnat, jPanelGraf2.getHeight());
                rutnat += rutnatStorlek * (int)Zoom;
            }
            
            rutnat = (rutnatStorlek*(int)Zoom)+50; //horizontela streck
            g.drawLine(40, 50, jPanelGraf2.getWidth(), 50);
            for (int i = 0; i < 50000; i++) {
                g.drawLine(40, rutnat , jPanelGraf2.getWidth(), rutnat);
                rutnat += rutnatStorlek * (int)Zoom;
            }
            
            
            
            //om grafen finns börjar programmet att rita grafen
            if(grafFinns) {
                g.setColor(Color.white);
                //listorna i grafritaren översätts till vanliga arrays, då g.drawPolyline endast tar emot arrays, inte arraylists
                int[] xKoord = gf.xkoordinater.stream().mapToInt(i->i).toArray();
                int[] yKoord = gf.ykoordinater.stream().mapToInt(i->i).toArray();
                
                //storlek på rutan anpassas enligt grafen
                Dimension d = new Dimension((int)(gf.xkoordinater.get(gf.xkoordinater.size()-1))+100, (int)(gf.fm.yMax()*Zoom)+100); 
                this.setPreferredSize(d);
                g.drawPolyline(xKoord, yKoord, xKoord.length); //ritar grafen
            }
            
            if(grafFinnsLuft) {
                g.setColor(Color.red);
                int[] xKoordLuft = gfLuft.xkoordinaterLuft.stream().mapToInt(i->i).toArray();
                int[] yKoordLuft = gfLuft.ykoordinaterLuft.stream().mapToInt(i->i).toArray();
                g.drawPolyline(xKoordLuft, yKoordLuft, xKoordLuft.length);
            }
            
            if(grafRensa) {
                g.setColor(Color.gray);
                g.fillRect(0, 0, jPanelGraf2.getWidth(), jPanelGraf2.getHeight());
                grafRensa = false;
            }
            
            g2d.setTransform(old);
            jScrollPane3.revalidate();
            
        }
    }
}